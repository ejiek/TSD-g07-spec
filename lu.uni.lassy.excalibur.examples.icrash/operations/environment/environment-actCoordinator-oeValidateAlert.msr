package icrash.operations.environment.actCoordinator.oeValidateAlert {

import lu.uni.lassy.messir.libraries.primitives

import icrash.concepts.primarytypes.datatypes
import icrash.concepts.primarytypes.classes
import icrash.environment

Operation Model {

operation: actCoordinator.outactCoordinator.oeValidateAlert(AdtAlertID:dtAlertID):ptBoolean{
preP{
  let TheSystem: ctState in
  let TheActor:actCoordinator in
  
  self.rnActor.rnSystem = TheSystem
  and self.rnActor = TheCoordinator
  
/* PreP01 */
  and TheSystem.vpStarted = true
/* PreP02 */
  and TheActor.rnctAuthenticated.vpIsLogged = true
   }
	
preF{
/* PreF01 */
  TheSystem.rnctAlert->select(id.eq(AdtAlertID))
  = ColctAlert
  and ColctAlert->size().eq(1)
}

postF{
  let TheSystem: ctState in
  let TheActor:actAuthenticated in
  
  self.rnActor.rnSystem = TheSystem
  and self.rnActor = TheActor
  
  TheSystem.rnctAlert->select(id.eq(AdtAlertID))
  = ColctAlert
  if (ColctAlert->forAll(T:ctAlert | T.corruption=regular or T.corruption=restored )
  then(
	/* PostF01 */
	and TheActor.rnInterfaceIN^ieMessage('The Alert is now declared as valid !')
	true
  )
  else(
	TheActor.rnInterfaceIN^ieMessage('Can\'t validate corrupted alert !')
  )
  endif

}
postP{
  let TheSystem: ctState in
  
  self.rnActor.rnSystem = TheSystem

  TheSystem.rnctAlert->select(id.eq(AdtAlertID))
  = ColctAlert
  if (ColctAlert->forAll(T:ctAlert | T.corruption=regular or T.corruption=restored )
  then(
	ColctAlert->forAll(T:ctAlert | T.status@post=valid)
  )
  else true
  endif

}
	
prolog{"src/Operations/Environment/OUT/outactCoordinator-oeValidateAlert.pl"}
}

}
}
